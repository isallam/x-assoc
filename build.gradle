apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext{
    projectPath    =   projectDir.getAbsolutePath()
    objyVersion    =   project.hasProperty("objyVersion")  ? project.getProperty('objyVersion')  : "12.5.0"
    thingspanhome  =   project.hasProperty("thingspanhome")? project.getProperty('thingspanhome'): '/opt' + File.separator + 'ThingSpan' + File.separator + '15.4'
    fdname         =   project.hasProperty('fdname')       ? project.getProperty('fdname')       : 'testfd'
    fddirhost      =   project.hasProperty('fddirhost')    ? project.getProperty('fddirhost')    : java.net.InetAddress.getLocalHost().getHostName();
    fddirpath      =   project.hasProperty('fddirpath')    ? project.getProperty('fddirpath')    : projectPath  + File.separator + 'data' + File.separator
    objydbcorepath =   "${thingspanhome}${File.separator}lib${File.separator}"
    sourcedatadir  =   project.hasProperty('sourcedatadir')? project.getProperty('sourcedatadir'): "${projectPath}${File.separator}source-data${File.separator}"
    mapperdir	   =   project.hasProperty('mapperdir')	   ? project.getProperty('mapperdir')	 : "${projectPath}${File.separator}config${File.separator}"
}	
// 
// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.objy.se.TestNewAssoc'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

configurations{
	packaging
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    packaging files(objydbcorepath + "objydb-core-${objyVersion}.jar")
    compile files(objydbcorepath + "objydb-core-${objyVersion}.jar")
    compile group: 'com.beust', name: 'jcommander', version: '1.7'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    //compile group: 'org.apache.commons', name: 'commons-csv', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.1'
}

task fatJar(type: Jar, dependsOn: 'build'){
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from files(sourceSets.main.output.classesDir, sourceSets.main.output.resourcesDir)
    baseName 'ingest-csv'
}

task testXAssoc(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'com.objy.se.TestNewAssoc'
	args "${fddirpath}${fdname}.boot"
}

task setupObjy(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'com.objy.se.SetupObjy'
	args "${fddirhost}::${fddirpath}${fdname}.boot"
}
